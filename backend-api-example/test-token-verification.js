require('dotenv').config();
const jwt = require('jsonwebtoken');
const crypto = require('crypto');

console.log('üîç Token Structure Comparison Test\n');

// Simulate the long-lived token payload (as generated by extension-token.js)
const testClerkId = 'user_32mSltWx9KkUkJe3sN2Bkym2w45';
const iat = Math.floor(Date.now() / 1000);
const lifetime = 4 * 30 * 24 * 60 * 60; // 4 months
const exp = iat + lifetime;
const nbf = iat - 5;
const jti = crypto.randomBytes(10).toString('hex');
const sessionId = crypto.randomBytes(16).toString('hex');

const longLivedPayload = {
  algorithm: 'RS256',
  azp: 'https://www.softcodes.ai',
  claims: {
    accountType: 'starter',
    exp: exp.toString(),
    firstName: 'Mathys ',
    iat: iat.toString(),
    lastName: 'Guillou',
    primaryEmail: 'mathys@softcodes.io',
    sessionId,
    sub: testClerkId,
    userId: testClerkId,
    vscodeExtension: true
  },
  exp,
  iat,
  iss: 'https://clerk.softcodes.ai',
  jti,
  lifetime,
  name: 'vscode-extension',
  nbf,
  sub: testClerkId
};

// Simulate the short-lived token payload (as generated by dashboard-token.js)
const shortLivedExp = iat + (60 * 60); // 1 hour
const shortLivedPayload = {
  clerkUserId: testClerkId,
  type: 'access',
  exp: shortLivedExp
};

console.log('üìã LONG-LIVED TOKEN PAYLOAD (RS256):');
console.log(JSON.stringify(longLivedPayload, null, 2));
console.log('\n');

console.log('üìã SHORT-LIVED TOKEN PAYLOAD (HS256):');
console.log(JSON.stringify(shortLivedPayload, null, 2));
console.log('\n');

// Simulate middleware extraction
console.log('üîß Middleware Processing Simulation:\n');

// Long-lived token processing
let longLivedDecoded = { ...longLivedPayload };
if (longLivedDecoded.claims) {
  longLivedDecoded = { ...longLivedDecoded, ...longLivedDecoded.claims };
}
const longLivedClerkId = longLivedDecoded.sub || longLivedDecoded.clerkUserId;

// Short-lived token processing
const shortLivedClerkId = shortLivedPayload.sub || shortLivedPayload.clerkUserId;

console.log('Long-Lived Token - Extracted Info:');
console.log('  - clerkUserId:', longLivedClerkId);
console.log('  - firstName:', longLivedDecoded.firstName);
console.log('  - lastName:', longLivedDecoded.lastName);
console.log('  - primaryEmail:', longLivedDecoded.primaryEmail);
console.log('  - accountType:', longLivedDecoded.accountType);
console.log('  - vscodeExtension:', longLivedDecoded.vscodeExtension);
console.log('  - sessionId:', longLivedDecoded.sessionId);
console.log('\n');

console.log('Short-Lived Token - Extracted Info:');
console.log('  - clerkUserId:', shortLivedClerkId);
console.log('  - type:', shortLivedPayload.type);
console.log('\n');

console.log('‚úÖ Information Retrieval Comparison:\n');
console.log('Both tokens can retrieve:');
console.log('  ‚úì clerkUserId (for database lookup)');
console.log('\n');

console.log('Long-lived token ALSO includes directly:');
console.log('  ‚úì User full name (firstName + lastName)');
console.log('  ‚úì Primary email address');
console.log('  ‚úì Account type/plan');
console.log('  ‚úì Session ID');
console.log('  ‚úì VSCode extension flag');
console.log('\n');

console.log('üéØ Database Lookup Process:');
console.log('Both tokens use clerkUserId to fetch from Supabase:');
console.log(`  SELECT id, clerk_id, plan_type FROM users WHERE clerk_id = '${longLivedClerkId}'`);
console.log('\nThis ensures both retrieve identical user data from the database.');
console.log('\n');

console.log('üìä Summary:');
console.log('‚úì Long-lived tokens include rich user context in payload (name, email, etc.)');
console.log('‚úì Short-lived tokens are minimal (only clerkUserId)');
console.log('‚úì Both retrieve same information via database lookup using clerkUserId');
console.log('‚úì Long-lived tokens provide additional context without extra DB queries');